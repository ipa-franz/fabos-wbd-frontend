/**
 * BaSyx Asset Administration Shell HTTP REST-API
 * The full description of the generic BaSyx Asset Administration Shell HTTP REST-API
 *
 * OpenAPI spec version: v1
 * Contact: constantin.ziesche@bosch.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { AssetAdministrationShellDescriptor } from '../model/assetAdministrationShellDescriptor';
import { ElementValue } from '../model/elementValue';
import { ISubmodelElement } from '../model/iSubmodelElement';
import { InvocationRequest } from '../model/invocationRequest';
import { InvocationResponse } from '../model/invocationResponse';
import { Result } from '../model/result';
import { Submodel } from '../model/submodel';
import { SubmodelElement } from '../model/submodelElement';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class AssetAdministrationShellService {

    protected basePath = 'http://localhost:8081/aasServer/shells';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Retrieves the Submodel from the Asset Administration Shell
     * 
     * @param submodelIdShort The Submodel&#x27;s short id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public aasSubmodelsSubmodelIdShortGet(submodelIdShort: string, observe?: 'body', reportProgress?: boolean): Observable<Submodel>;
    public aasSubmodelsSubmodelIdShortGet(submodelIdShort: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Submodel>>;
    public aasSubmodelsSubmodelIdShortGet(submodelIdShort: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Submodel>>;
    public aasSubmodelsSubmodelIdShortGet(submodelIdShort: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (submodelIdShort === null || submodelIdShort === undefined) {
            throw new Error('Required parameter submodelIdShort was null or undefined when calling aasSubmodelsSubmodelIdShortGet.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Submodel>('get',`${this.basePath}/aas/submodels/${encodeURIComponent(String(submodelIdShort))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Deletes a specific Submodel from the Asset Administration Shell
     * 
     * @param submodelIdShort The Submodel&#x27;s short id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteSubmodelFromShellByIdShort(submodelIdShort: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public deleteSubmodelFromShellByIdShort(submodelIdShort: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public deleteSubmodelFromShellByIdShort(submodelIdShort: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public deleteSubmodelFromShellByIdShort(submodelIdShort: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (submodelIdShort === null || submodelIdShort === undefined) {
            throw new Error('Required parameter submodelIdShort was null or undefined when calling deleteSubmodelFromShellByIdShort.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('delete',`${this.basePath}/aas/submodels/${encodeURIComponent(String(submodelIdShort))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Retrieves the Asset Administration Shell Descriptor
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAssetAdministrationShell(observe?: 'body', reportProgress?: boolean): Observable<Array<AssetAdministrationShellDescriptor>>;
    public getAssetAdministrationShell(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<AssetAdministrationShellDescriptor>>>;
    public getAssetAdministrationShell(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<AssetAdministrationShellDescriptor>>>;
    public getAssetAdministrationShell(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        // return this.httpClient.request<AssetAdministrationShellDescriptor>('get',`${this.basePath}/aas`,
        return this.httpClient.request<AssetAdministrationShellDescriptor>('get',`${this.basePath}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Retrieves the Submodel from the Asset Administration Shell
     * 
     * @param submodelIdShort The Submodel&#x27;s short id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getSubmodelFromShellByIdShort(submodelIdShort: string, observe?: 'body', reportProgress?: boolean): Observable<Submodel>;
    public getSubmodelFromShellByIdShort(submodelIdShort: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Submodel>>;
    public getSubmodelFromShellByIdShort(submodelIdShort: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Submodel>>;
    public getSubmodelFromShellByIdShort(submodelIdShort: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (submodelIdShort === null || submodelIdShort === undefined) {
            throw new Error('Required parameter submodelIdShort was null or undefined when calling getSubmodelFromShellByIdShort.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Submodel>('get',`${this.basePath}/aas/submodels/${encodeURIComponent(String(submodelIdShort))}/submodel`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Retrieves all Submodels from the  Asset Administration Shell
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getSubmodelsFromShell(aasId: string, observe?: 'body', reportProgress?: boolean): Observable<Array<Submodel>>;
    public getSubmodelsFromShell(aasId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Submodel>>>;
    public getSubmodelsFromShell(aasId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Submodel>>>;
    public getSubmodelsFromShell(aasId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<Submodel>>('get',`${this.basePath}/${aasId}/aas/submodels`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Creates or updates a Submodel to an existing Asset Administration Shell
     * 
     * @param submodelIdShort The Submodel&#x27;s short id
     * @param body The serialized Submodel object
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public putSubmodelToShell(submodelIdShort: string, body?: Submodel, observe?: 'body', reportProgress?: boolean): Observable<Submodel>;
    public putSubmodelToShell(submodelIdShort: string, body?: Submodel, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Submodel>>;
    public putSubmodelToShell(submodelIdShort: string, body?: Submodel, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Submodel>>;
    public putSubmodelToShell(submodelIdShort: string, body?: Submodel, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (submodelIdShort === null || submodelIdShort === undefined) {
            throw new Error('Required parameter submodelIdShort was null or undefined when calling putSubmodelToShell.');
        }


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<Submodel>('put',`${this.basePath}/aas/submodels/${encodeURIComponent(String(submodelIdShort))}`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Deletes a specific Submodel-Element from the Submodel
     * 
     * @param submodelIdShort The Submodel&#x27;s short id
     * @param seIdShortPath The Submodel-Element&#x27;s IdShort-Path
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public shellDeleteSubmodelElementByIdShort(submodelIdShort: string, seIdShortPath: string, observe?: 'body', reportProgress?: boolean): Observable<Result>;
    public shellDeleteSubmodelElementByIdShort(submodelIdShort: string, seIdShortPath: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Result>>;
    public shellDeleteSubmodelElementByIdShort(submodelIdShort: string, seIdShortPath: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Result>>;
    public shellDeleteSubmodelElementByIdShort(submodelIdShort: string, seIdShortPath: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (submodelIdShort === null || submodelIdShort === undefined) {
            throw new Error('Required parameter submodelIdShort was null or undefined when calling shellDeleteSubmodelElementByIdShort.');
        }

        if (seIdShortPath === null || seIdShortPath === undefined) {
            throw new Error('Required parameter seIdShortPath was null or undefined when calling shellDeleteSubmodelElementByIdShort.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Result>('delete',`${this.basePath}/aas/submodels/${encodeURIComponent(String(submodelIdShort))}/submodel/submodelElements/${encodeURIComponent(String(seIdShortPath))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Retrieves the result of an asynchronously started operation
     * 
     * @param submodelIdShort Submodel&#x27;s short id
     * @param idShortPathToOperation The IdShort path to the Operation
     * @param requestId The request id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public shellGetInvocationResultByIdShort(submodelIdShort: string, idShortPathToOperation: string, requestId: string, observe?: 'body', reportProgress?: boolean): Observable<InvocationResponse>;
    public shellGetInvocationResultByIdShort(submodelIdShort: string, idShortPathToOperation: string, requestId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<InvocationResponse>>;
    public shellGetInvocationResultByIdShort(submodelIdShort: string, idShortPathToOperation: string, requestId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<InvocationResponse>>;
    public shellGetInvocationResultByIdShort(submodelIdShort: string, idShortPathToOperation: string, requestId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (submodelIdShort === null || submodelIdShort === undefined) {
            throw new Error('Required parameter submodelIdShort was null or undefined when calling shellGetInvocationResultByIdShort.');
        }

        if (idShortPathToOperation === null || idShortPathToOperation === undefined) {
            throw new Error('Required parameter idShortPathToOperation was null or undefined when calling shellGetInvocationResultByIdShort.');
        }

        if (requestId === null || requestId === undefined) {
            throw new Error('Required parameter requestId was null or undefined when calling shellGetInvocationResultByIdShort.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<InvocationResponse>('get',`${this.basePath}/aas/submodels/${encodeURIComponent(String(submodelIdShort))}/submodel/submodelElements/${encodeURIComponent(String(idShortPathToOperation))}/invocationList/${encodeURIComponent(String(requestId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Retrieves a specific Submodel-Element from the Submodel
     * 
     * @param submodelIdShort The Submodel&#x27;s short id
     * @param seIdShortPath The Submodel-Element&#x27;s IdShort-Path
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public shellGetSubmodelElementByIdShort(submodelIdShort: string, seIdShortPath: string, observe?: 'body', reportProgress?: boolean): Observable<SubmodelElement>;
    public shellGetSubmodelElementByIdShort(submodelIdShort: string, seIdShortPath: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<SubmodelElement>>;
    public shellGetSubmodelElementByIdShort(submodelIdShort: string, seIdShortPath: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<SubmodelElement>>;
    public shellGetSubmodelElementByIdShort(submodelIdShort: string, seIdShortPath: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (submodelIdShort === null || submodelIdShort === undefined) {
            throw new Error('Required parameter submodelIdShort was null or undefined when calling shellGetSubmodelElementByIdShort.');
        }

        if (seIdShortPath === null || seIdShortPath === undefined) {
            throw new Error('Required parameter seIdShortPath was null or undefined when calling shellGetSubmodelElementByIdShort.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<SubmodelElement>('get',`${this.basePath}/aas/submodels/${encodeURIComponent(String(submodelIdShort))}/submodel/submodelElements/${encodeURIComponent(String(seIdShortPath))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Retrieves the value of a specific Submodel-Element from the Submodel
     * 
     * @param submodelIdShort The Submodel&#x27;s short id
     * @param seIdShortPath The Submodel-Element&#x27;s IdShort-Path
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public shellGetSubmodelElementValueByIdShort(submodelIdShort: string, seIdShortPath: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public shellGetSubmodelElementValueByIdShort(submodelIdShort: string, seIdShortPath: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public shellGetSubmodelElementValueByIdShort(submodelIdShort: string, seIdShortPath: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public shellGetSubmodelElementValueByIdShort(submodelIdShort: string, seIdShortPath: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (submodelIdShort === null || submodelIdShort === undefined) {
            throw new Error('Required parameter submodelIdShort was null or undefined when calling shellGetSubmodelElementValueByIdShort.');
        }

        if (seIdShortPath === null || seIdShortPath === undefined) {
            throw new Error('Required parameter seIdShortPath was null or undefined when calling shellGetSubmodelElementValueByIdShort.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('get',`${this.basePath}/aas/submodels/${encodeURIComponent(String(submodelIdShort))}/submodel/submodelElements/${encodeURIComponent(String(seIdShortPath))}/value`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Retrieves all Submodel-Elements from the Submodel
     * 
     * @param submodelIdShort The Submodel&#x27;s short id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public shellGetSubmodelElements(submodelIdShort: string, observe?: 'body', reportProgress?: boolean): Observable<Array<SubmodelElement>>;
    public shellGetSubmodelElements(submodelIdShort: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<SubmodelElement>>>;
    public shellGetSubmodelElements(submodelIdShort: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<SubmodelElement>>>;
    public shellGetSubmodelElements(submodelIdShort: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (submodelIdShort === null || submodelIdShort === undefined) {
            throw new Error('Required parameter submodelIdShort was null or undefined when calling shellGetSubmodelElements.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<SubmodelElement>>('get',`${this.basePath}/aas/submodels/${encodeURIComponent(String(submodelIdShort))}/submodel/submodelElements`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Retrieves the minimized version of a Submodel, i.e. only the values of SubmodelElements are serialized and returned
     * 
     * @param submodelIdShort The Submodel&#x27;s short id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public shellGetSubmodelValues(aasId: string, submodelIdShort: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public shellGetSubmodelValues(aasId: string, submodelIdShort: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public shellGetSubmodelValues(aasId: string, submodelIdShort: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public shellGetSubmodelValues(aasId: string, submodelIdShort: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (submodelIdShort === null || submodelIdShort === undefined) {
            throw new Error('Required parameter submodelIdShort was null or undefined when calling shellGetSubmodelValues.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('get',`${this.basePath}/${aasId}/aas/submodels/${encodeURIComponent(String(submodelIdShort))}/submodel/values`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Invokes a specific operation from the Submodel synchronously or asynchronously
     * 
     * @param submodelIdShort Submodel&#x27;s short id
     * @param idShortPathToOperation The IdShort path to the Operation
     * @param body The parameterized request object for the invocation
     * @param async Determines whether the execution of the operation is asynchronous (true) or not (false)
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public shellInvokeOperationByIdShort(submodelIdShort: string, idShortPathToOperation: string, body?: InvocationRequest, async?: boolean, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public shellInvokeOperationByIdShort(submodelIdShort: string, idShortPathToOperation: string, body?: InvocationRequest, async?: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public shellInvokeOperationByIdShort(submodelIdShort: string, idShortPathToOperation: string, body?: InvocationRequest, async?: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public shellInvokeOperationByIdShort(submodelIdShort: string, idShortPathToOperation: string, body?: InvocationRequest, async?: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (submodelIdShort === null || submodelIdShort === undefined) {
            throw new Error('Required parameter submodelIdShort was null or undefined when calling shellInvokeOperationByIdShort.');
        }

        if (idShortPathToOperation === null || idShortPathToOperation === undefined) {
            throw new Error('Required parameter idShortPathToOperation was null or undefined when calling shellInvokeOperationByIdShort.');
        }



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (async !== undefined && async !== null) {
            queryParameters = queryParameters.set('async', <any>async);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<any>('post',`${this.basePath}/aas/submodels/${encodeURIComponent(String(submodelIdShort))}/submodel/submodelElements/${encodeURIComponent(String(idShortPathToOperation))}/invoke`,
            {
                body: body,
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Creates or updates a Submodel-Element at the Submodel
     * 
     * @param submodelIdShort The Submodel&#x27;s short id
     * @param seIdShortPath The Submodel-Element&#x27;s IdShort-Path
     * @param body The Submodel-Element object
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public shellPutSubmodelElement(submodelIdShort: string, seIdShortPath: string, body?: ISubmodelElement, observe?: 'body', reportProgress?: boolean): Observable<SubmodelElement>;
    public shellPutSubmodelElement(submodelIdShort: string, seIdShortPath: string, body?: ISubmodelElement, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<SubmodelElement>>;
    public shellPutSubmodelElement(submodelIdShort: string, seIdShortPath: string, body?: ISubmodelElement, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<SubmodelElement>>;
    public shellPutSubmodelElement(submodelIdShort: string, seIdShortPath: string, body?: ISubmodelElement, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (submodelIdShort === null || submodelIdShort === undefined) {
            throw new Error('Required parameter submodelIdShort was null or undefined when calling shellPutSubmodelElement.');
        }

        if (seIdShortPath === null || seIdShortPath === undefined) {
            throw new Error('Required parameter seIdShortPath was null or undefined when calling shellPutSubmodelElement.');
        }


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<SubmodelElement>('put',`${this.basePath}/aas/submodels/${encodeURIComponent(String(submodelIdShort))}/submodel/submodelElements/${encodeURIComponent(String(seIdShortPath))}`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Updates the Submodel-Element&#x27;s value
     * 
     * @param submodelIdShort The Submodel&#x27;s short id
     * @param seIdShortPath The Submodel-Element&#x27;s IdShort-Path
     * @param body The new value
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public shellPutSubmodelElementValueByIdShort(aasId: string, submodelIdShort: string, seIdShortPath: string, body?: any, observe?: 'body', reportProgress?: boolean): Observable<ElementValue>;
    public shellPutSubmodelElementValueByIdShort(aasId: string, submodelIdShort: string, seIdShortPath: string, body?: any, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ElementValue>>;
    public shellPutSubmodelElementValueByIdShort(aasId: string, submodelIdShort: string, seIdShortPath: string, body?: any, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ElementValue>>;
    public shellPutSubmodelElementValueByIdShort(aasId: string, submodelIdShort: string, seIdShortPath: string, body?: any, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (submodelIdShort === null || submodelIdShort === undefined) {
            throw new Error('Required parameter submodelIdShort was null or undefined when calling shellPutSubmodelElementValueByIdShort.');
        }

        if (seIdShortPath === null || seIdShortPath === undefined) {
            throw new Error('Required parameter seIdShortPath was null or undefined when calling shellPutSubmodelElementValueByIdShort.');
        }


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
                                                            //`${this.basePath}/${aasId}/aas/submodels/${encodeURIComponent(String(submodelIdShort))}/submodel/values`
        return this.httpClient.request<ElementValue>('put',`${this.basePath}/${aasId}/aas/submodels/${encodeURIComponent(String(submodelIdShort))}/submodel/submodelElements/${encodeURIComponent(String(seIdShortPath))}/value`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
